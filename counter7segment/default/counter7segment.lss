
counter7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00000146  000001ba  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000034  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000143  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d2  00000000  00000000  00000351  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000162  00000000  00000000  00000423  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e2  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
int x,units,tens;
void main()
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
   DDRA=0X00;
  9a:	1a ba       	out	0x1a, r1	; 26
   DDRC=0Xff;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	84 bb       	out	0x14, r24	; 20
   PORTA=(1<<PA7);
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	c0 e0       	ldi	r28, 0x00	; 0
  a6:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	08 ec       	ldi	r16, 0xC8	; 200
  aa:	10 e0       	ldi	r17, 0x00	; 0
  ac:	1d c0       	rjmp	.+58     	; 0xe8 <main+0x56>
   while(1)
      {   
	         
			       for(x=0;x<20;)
				     {    
					 if((PINA & 0b10000000)==0)
  ae:	cf 99       	sbic	0x19, 7	; 25
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x1c>
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
int x,units,tens;
void main()
{
  b2:	21 96       	adiw	r28, 0x01	; 1
					 if((PINA & 0b10000000)==0)
			 {    
					     x++;
						 units=x%10;
						 tens=x/10;
						 PORTC=tens;
  b4:	ce 01       	movw	r24, r28
  b6:	6a e0       	ldi	r22, 0x0A	; 10
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	0e 94 7a 00 	call	0xf4	; 0xf4 <__divmodhi4>
  be:	65 bb       	out	0x15, r22	; 21
						 PORTC |=(units<<4);
  c0:	25 b3       	in	r18, 0x15	; 21
  c2:	ce 01       	movw	r24, r28
  c4:	6a e0       	ldi	r22, 0x0A	; 10
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 7a 00 	call	0xf4	; 0xf4 <__divmodhi4>
  cc:	34 e0       	ldi	r19, 0x04	; 4
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	3a 95       	dec	r19
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x3c>
  d6:	28 2b       	or	r18, r24
  d8:	25 bb       	out	0x15, r18	; 21
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	f8 01       	movw	r30, r16
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x4e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x4c>
   DDRC=0Xff;
   PORTA=(1<<PA7);
   while(1)
      {   
	         
			       for(x=0;x<20;)
  e8:	c4 31       	cpi	r28, 0x14	; 20
  ea:	d1 05       	cpc	r29, r1
  ec:	04 f3       	brlt	.-64     	; 0xae <main+0x1c>
  ee:	c0 e0       	ldi	r28, 0x00	; 0
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	fa cf       	rjmp	.-12     	; 0xe8 <main+0x56>

000000f4 <__divmodhi4>:
  f4:	97 fb       	bst	r25, 7
  f6:	09 2e       	mov	r0, r25
  f8:	07 26       	eor	r0, r23
  fa:	0a d0       	rcall	.+20     	; 0x110 <__divmodhi4_neg1>
  fc:	77 fd       	sbrc	r23, 7
  fe:	04 d0       	rcall	.+8      	; 0x108 <__divmodhi4_neg2>
 100:	0c d0       	rcall	.+24     	; 0x11a <__udivmodhi4>
 102:	06 d0       	rcall	.+12     	; 0x110 <__divmodhi4_neg1>
 104:	00 20       	and	r0, r0
 106:	1a f4       	brpl	.+6      	; 0x10e <__divmodhi4_exit>

00000108 <__divmodhi4_neg2>:
 108:	70 95       	com	r23
 10a:	61 95       	neg	r22
 10c:	7f 4f       	sbci	r23, 0xFF	; 255

0000010e <__divmodhi4_exit>:
 10e:	08 95       	ret

00000110 <__divmodhi4_neg1>:
 110:	f6 f7       	brtc	.-4      	; 0x10e <__divmodhi4_exit>
 112:	90 95       	com	r25
 114:	81 95       	neg	r24
 116:	9f 4f       	sbci	r25, 0xFF	; 255
 118:	08 95       	ret

0000011a <__udivmodhi4>:
 11a:	aa 1b       	sub	r26, r26
 11c:	bb 1b       	sub	r27, r27
 11e:	51 e1       	ldi	r21, 0x11	; 17
 120:	07 c0       	rjmp	.+14     	; 0x130 <__udivmodhi4_ep>

00000122 <__udivmodhi4_loop>:
 122:	aa 1f       	adc	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	a6 17       	cp	r26, r22
 128:	b7 07       	cpc	r27, r23
 12a:	10 f0       	brcs	.+4      	; 0x130 <__udivmodhi4_ep>
 12c:	a6 1b       	sub	r26, r22
 12e:	b7 0b       	sbc	r27, r23

00000130 <__udivmodhi4_ep>:
 130:	88 1f       	adc	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	5a 95       	dec	r21
 136:	a9 f7       	brne	.-22     	; 0x122 <__udivmodhi4_loop>
 138:	80 95       	com	r24
 13a:	90 95       	com	r25
 13c:	bc 01       	movw	r22, r24
 13e:	cd 01       	movw	r24, r26
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
